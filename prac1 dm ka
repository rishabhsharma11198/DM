practical 1

absolute function
x=seq(-30,30,0.005)
y=abs(x)
plot(x,y,main="absolute function",xlab="x",ylab="y=abs(x)")

logarithm
x=seq(-30,30,0.005)
y=log(x)
plot(x,y,main="logical function",xlab="x",ylab="y=log(x)")

exponential function
x=seq(-30,30,0.005)
y=exp(x)
plot(x,y,main="exponential function",xlab="x",ylab="y=exp(x)")

flooring function
x=seq(0,10,0.52)
y=floor(x)
plot(x,y,main="flooring function",xlab="x",ylab="y=floor(x)")

ceiling function
x=seq(0,10,0.52)
y=ceiling(x)
plot(x,y,main="ceilinging function",xlab="x",ylab="y=ceiling(x)")

flooring function
x=seq(0,10,0.52)
y=floor(x)
plot(x,y,main="flooring function",xlab="x",ylab="y=floor(x)")

sin function
x=seq(-30,30,0.005)
y=sin(x)
plot(x,y,main="sin function",xlab="x",ylab="y=sin(x)")

cos function
x=seq(-30,30,0.005)
y=cos(x)
plot(x,y,main="cos function",xlab="x",ylab="y=cos(x)")



practical 2 reccurence

return_factorial<- function(n){
if(n==1){return(n)}
else{return(n* return_factorial(n-1))}}

return_factorial(5)=120

recurse_fibo<-function(n)
{if (n<=1){return(n)}
else{return (recurse_fibo(n-1)+recurse_fibo(n-2))}}

nterms =as.integer(readline(prompt="how many terms :"))

if(nterms<=0){print("please enter a positive integer")
}else{
print("fibonacii sequence:")
for(i in  0:(nterms-1)){print(recurse_fibo(i))}}


practical 3 
install.packages("igraph")
library(igraph)
graph.directed<-graph(c(1,2, 2,3, 3,1, 2,4, 5,5, 3,6, 7,1, 7,5),directed=TRUE)
plot(graph.directed)

graph.directed<-graph(c(1,2, 2,3),directed=TRUE)
plot(graph.directed)

graph.directed<-graph(c(1,1, 2,2, 3,3),directed=TRUE)
plot(graph.directed)

graph.directed<-graph(c(1,2, 2,2, 2,4, 3,2, 3,4, 4,1, 4,3),directed=TRUE)
plot(graph.directed)



practical 4
graph.directed<-graph(c("a","d", "d","e", "r","f"),directed=TRUE)
plot(graph.directed)

graph.directed<-graph(c("a","1", "d","1", "r","2"),directed=TRUE)
plot(graph.directed)

graph.directed<-graph(c("1","r", "2","5", "3","r"),directed=TRUE)
plot(graph.directed)



practical 5 union of graph
A<-graph(c(1,2, 2,3, 3,1, 2,4, 5,5, 3,6, 7,1, 7,5),directed=TRUE)
plot(A)
C<-graph(c(1,2, 2,3, 3,1, 2,4, 5,5, 3,6, 7,1, 5,1),directed=TRUE)
plot(C)
g<-union(A,C)
plot(g)
M<-graph(c("A","B", "B","D", "D,"C", "C","A"),directed=TRUE)
plot(M)

practical 6 intersection of gfraph
A<-graph(c(1,2, 2,3, 3,1, 2,4, 5,5, 3,6, 7,1, 7,5),directed=TRUE)
plot(A)
C<-graph(c(1,2, 2,3, 3,1, 2,4, 5,5, 3,6, 7,1, 7,5, 5,1),directed=TRUE)
plot(C)
g<-intersection(A,C)
plot(g)

P<-graph(c("A","B", "B","D", "C","D" "B","C", "A","C", "C","F", "C","E"),directed=TRUE)
plot(P)
Q<-graph(c("A","B", "A","D", "A","C" "C","F", "B","D", "A","D", "D","E", "F","H"),directed=TRUE)
plot(Q)
g<-intersection(P,Q)
plot(g)


practical 7
library(data.tree)
g<-Node$new("v1")
v2<-g$AddChild("v2")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
print(g)



practical 8


library(data.tree)
g<-Node$new("v1")
v2<-g$AddChild("v2")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
g$Get('level',traversal="pre-order")



practical-9 

library(data.tree)
g<-Node$new("v1")
v2<-g$AddChild("v2")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
g$Get('level',traversal="post-order")


practical-10

library(data.tree)
g<-Node$new("v1")
v2<-g$AddChild("v2")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
g$Get('level',traversal="in-order")


practical-11

library(data.tree)
g<-Node$new("v1")
v2<-g$AddChild("v2")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
g$v2$AddChild("v6")
print(g)

practical-12

g<-Node$new("v1")
v2<-g$AddChild("v2")
g$v2$AddChild("v6")
v3<-g$AddChild("v3")
v4<-v3$AddChild("v4")
v5<-v3$AddChild("v5")
g$v2$RemoveChild("v6")
print(g)











